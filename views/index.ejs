<!DOCTYPE html>
<html>
    <head>
        <title>View Outputs</title>
        <style>
            @keyframes colorchange {
                from { background-color: cyan; }
                to { background-color: white; }
            }

            body {
                padding: 10px 0px 10px 0px;
                margin: 0px;
            }
            
            nav {
                /* background-color: cyan; */
                position: sticky;
                margin: 0px;
                padding: 10px;
                left: 0;
                right: 0;
                top: 0;
            }

            #container {
                margin: 10px;
            }

            .output {
                margin-bottom: 5px;
                padding: 5px;
                border: 1px dotted grey;
                animation-name: colorchange;
                animation-duration: 4s;
            }

            .output a {
                float: right;
            }

            a.button {
                display:inline-block;
                padding:0.3em 1.2em;
                margin:0 0.1em 0.1em 0;
                border:0.16em solid rgba(255,255,255,0);
                border-radius:2em;
                box-sizing: border-box;
                text-decoration:none;
                font-family:'Roboto',sans-serif;
                font-weight:300;
                color: #666;
                text-shadow: 0 0.04em 0.04em rgba(0,0,0,0.35);
                text-align: center;
                transition: all 0.2s;
            }

            a.button.default {
                color: white;
                background-color: rgba(106, 213, 228, 0.9);
            }

            a.button.primary {
                color: white;
                background-color: rgba(59, 214, 111, 0.9);
            }

            a.button:hover {
                border-color: purple;
            }

            @media all and (max-width:30em){
                a.button {
                    display:block;
                    margin:0.2em auto;
                    cursor: pointer;
                }
            }

            /* scrollbars */
            /* width */
            ::-webkit-scrollbar {
                width: 10px;
	            background-color: #F5F5F5;
            }

            /* Track */
            ::-webkit-scrollbar-track {
                -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
	            background-color: #F5F5F5;
            }

            /* Handle */
            ::-webkit-scrollbar-thumb {
                background-color: #F90;	
                background-image: -webkit-linear-gradient(45deg,
                rgba(255, 255, 255, .2) 25%,
                transparent 25%,
                transparent 50%,
                rgba(255, 255, 255, .2) 50%,
                rgba(255, 255, 255, .2) 75%,
                transparent 75%,
                transparent)
            }

            /* Handle on hover */
            ::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

        </style>
        <script src="/socket.io/socket.io.js"></script>
    </head>
    <body>
        <nav>
            <a onclick="clearLogs()" href="javascript:void(0);" class="button default">Clear</a>&nbsp;<a onclick="testMessage()" href="javascript:void(0);" class="button primary">Test Message</a>
        </nav>
        <div id="container">
            <div class="output">
                <a onclick="clearLine(this)" class="button default" href="javascript:void(0)">click to delete ❌</a>
                <pre>Initialize</pre>
            </div>
        </div>
        <script type="text/javascript">
             // api address
            var api_address = 'http://localhost:3002/';
            var socket = io.connect(api_address);

            // clear all logs
            function clearLogs() {
                var el = document.getElementById('container');
                el.innerHTML = "";
            }

            // clear single log
            function clearLine(el) {
                var parentEl = el.parentElement.parentElement;
                parentEl.removeChild(el.parentElement);
            }

            // create button with prefered btnName, and assign clear current log
            function createButton(node, btnName) {
                var btn = document.createElement("a");
                btn.setAttribute("class", "button default");
                btn.setAttribute("href", "javascript:void(0)");
                btn.innerHTML = btnName;
                btn.onclick = function () {
                    clearLine(node);
                }
                return btn;
            }
            
            // main function
            function appendMessage(msg) {
                var el = document.getElementById('container');
                var node = document.createElement("div");
                node.classList.add("output");
                
                var preNode = document.createElement("pre");
                preNode.innerHTML = JSON.stringify(msg, null, 2);
                
                var btnName = msg.date + " ❌";
                node.appendChild(createButton(preNode, btnName));
                node.appendChild(preNode);
                el.appendChild(node);

                // scroll
                window.scrollTo(0, document.body.scrollHeight);
            }

            // socket listener
            socket.on('body_result', (msg) => {
                appendMessage(msg);
            });

            // test message
            function testMessage() {
                let data = {
                    message: 'A test message invoked!'
                };
                _testTracker.track(data);
            }

            var _testTracker = {
                track: (data) => {
                    console.table(data);
                    fetch(api_address, {
                        method: 'POST',
                        mode: 'cors',
                        cache: 'no-cache',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })
                    .then({})
                    .catch(err => { console.error(err) });
                }
            }

        </script>
    </body>
</html>